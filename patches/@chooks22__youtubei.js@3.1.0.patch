diff --git a/esm/parser/youtube/LiveChat.js b/esm/parser/youtube/LiveChat.js
index e9aa170b48d023de671941b60bc6df20ca1444ed..ae32474a2d48e4d8f5387d4ed674b0a7b2fe5ead 100644
--- a/esm/parser/youtube/LiveChat.js
+++ b/esm/parser/youtube/LiveChat.js
@@ -27,8 +27,8 @@ export class LiveChat extends EventEmitterLike {
         _LiveChat_video_info.set(this, void 0);
         _LiveChat_continuation.set(this, void 0);
         _LiveChat_mcontinuation.set(this, void 0);
-        _LiveChat_lc_polling_interval_ms.set(this, 1000);
-        _LiveChat_md_polling_interval_ms.set(this, 5000);
+        _LiveChat_lc_polling_interval_ms.set(this, 1000 / 5);
+        _LiveChat_md_polling_interval_ms.set(this, 5000 / 5);
         Object.defineProperty(this, "initial_info", {
             enumerable: true,
             configurable: true,
@@ -113,14 +113,14 @@ _LiveChat_actions = new WeakMap(), _LiveChat_video_info = new WeakMap(), _LiveCh
             clearTimeout(lc_poller);
             this.running && __classPrivateFieldGet(this, _LiveChat_instances, "m", _LiveChat_pollLivechat).call(this);
         })().catch((err) => Promise.reject(err));
-    }, __classPrivateFieldGet(this, _LiveChat_lc_polling_interval_ms, "f"));
+    }, __classPrivateFieldGet(this, _LiveChat_lc_polling_interval_ms, "f") / 20);
 }, _LiveChat_emitSmoothedActions = 
 /**
  * Ensures actions are emitted at the right speed.
  * This was adapted from YouTube's compiled code (Android).
  */
 async function _LiveChat_emitSmoothedActions(actions) {
-    const base = 1E4;
+    const base = 1E4 / 20;
     let delay = actions.length < base / 80 ? 1 : 0;
     const emit_delay_ms = delay == 1
         ? (delay = base / actions.length,
@@ -163,7 +163,7 @@ async function _LiveChat_emitSmoothedActions(actions) {
             clearTimeout(md_poller);
             this.running && __classPrivateFieldGet(this, _LiveChat_instances, "m", _LiveChat_pollMetadata).call(this);
         })().catch((err) => Promise.reject(err));
-    }, __classPrivateFieldGet(this, _LiveChat_md_polling_interval_ms, "f"));
+    }, __classPrivateFieldGet(this, _LiveChat_md_polling_interval_ms, "f") / 5);
 }, _LiveChat_wait = async function _LiveChat_wait(ms) {
     return new Promise((resolve) => setTimeout(() => resolve(), ms));
 };
diff --git a/script/parser/youtube/LiveChat.js b/script/parser/youtube/LiveChat.js
index c38a988a69aa6b98ff12576f24f69babbeeaca41..d4df7dfb8eb5a37f93b137a41d879fecf26de48c 100644
--- a/script/parser/youtube/LiveChat.js
+++ b/script/parser/youtube/LiveChat.js
@@ -30,8 +30,8 @@ class LiveChat extends EventEmitterLike_js_1.EventEmitterLike {
         _LiveChat_video_info.set(this, void 0);
         _LiveChat_continuation.set(this, void 0);
         _LiveChat_mcontinuation.set(this, void 0);
-        _LiveChat_lc_polling_interval_ms.set(this, 1000);
-        _LiveChat_md_polling_interval_ms.set(this, 5000);
+        _LiveChat_lc_polling_interval_ms.set(this, 1000 / 5);
+        _LiveChat_md_polling_interval_ms.set(this, 5000 / 5);
         Object.defineProperty(this, "initial_info", {
             enumerable: true,
             configurable: true,
@@ -117,14 +117,14 @@ _LiveChat_actions = new WeakMap(), _LiveChat_video_info = new WeakMap(), _LiveCh
             clearTimeout(lc_poller);
             this.running && __classPrivateFieldGet(this, _LiveChat_instances, "m", _LiveChat_pollLivechat).call(this);
         })().catch((err) => Promise.reject(err));
-    }, __classPrivateFieldGet(this, _LiveChat_lc_polling_interval_ms, "f"));
+    }, __classPrivateFieldGet(this, _LiveChat_lc_polling_interval_ms, "f") / 20);
 }, _LiveChat_emitSmoothedActions = 
 /**
  * Ensures actions are emitted at the right speed.
  * This was adapted from YouTube's compiled code (Android).
  */
 async function _LiveChat_emitSmoothedActions(actions) {
-    const base = 1E4;
+    const base = 1E4 / 20;
     let delay = actions.length < base / 80 ? 1 : 0;
     const emit_delay_ms = delay == 1
         ? (delay = base / actions.length,
@@ -167,7 +167,7 @@ async function _LiveChat_emitSmoothedActions(actions) {
             clearTimeout(md_poller);
             this.running && __classPrivateFieldGet(this, _LiveChat_instances, "m", _LiveChat_pollMetadata).call(this);
         })().catch((err) => Promise.reject(err));
-    }, __classPrivateFieldGet(this, _LiveChat_md_polling_interval_ms, "f"));
+    }, __classPrivateFieldGet(this, _LiveChat_md_polling_interval_ms, "f") / 5);
 }, _LiveChat_wait = async function _LiveChat_wait(ms) {
     return new Promise((resolve) => setTimeout(() => resolve(), ms));
 };